<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
			   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
			   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

    <context:annotation-config />

    <security:global-method-security secured-annotations="enabled">
    </security:global-method-security>

    <!--
    Saiku currently ships with basic authentication working out of the box, below is also the code for Digest authentication,
    should you want digest authentication for you application comment out the basic authentication block and enable digest authentication.
    We are also working on other authentication methods, namely OAuth and Remember me token based policies.

    To add and remove users you currently have to edit WEB-INF/users.properties, this will be replaced with an admin console in due course and
    you can also swap this out for JDBC backed security lists and (although untested) technically LDAP etc.

    If you modify these files in anyway it would be very useful if you sent us patches for any useful changes you make.
     -->

    <!-- BASIC AUTHENTICATION -->
    <security:http pattern="/rest/saiku/info" security="none">
    </security:http>
    <security:http pattern="/rest/saiku/info/ui-settings" security="none">
    </security:http>
    <security:http pattern="/repository/**" security="none">
    </security:http>

    <bean id="imsPreAuthFilter" class="org.saiku.IMSSharedContextPreAuthenticatedProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager" />
    </bean>

    <bean id="preAuthProvider" class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
        <property name="preAuthenticatedUserDetailsService">
            <bean class="org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService" />
        </property>
    </bean>

    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="preAuthProvider" />
    </security:authentication-manager>

    <security:http create-session="never" auto-config="true" use-expressions="false">
        <security:csrf disabled="true"/>

        <!-- Pre authentication filter that looks up for principal and authorities by reading from a shared servlet context. -->
        <security:custom-filter ref="imsPreAuthFilter" position="PRE_AUTH_FILTER" />

        <security:form-login login-page="/login" default-target-url="/" />
        <security:access-denied-handler error-page="/login" />

        <!-- Notice we use ROLE_VIEWER, same as in IMS, the roles will be fetched remotely with the authenticated token -->
        <security:intercept-url pattern="/serverdocs/**" access="ROLE_VIEWER" />
        <security:intercept-url pattern="/rest/saiku/session*" access="ROLE_VIEWER" />
        <security:intercept-url pattern="/rest/saiku/session/" access="ROLE_VIEWER" />
        <security:intercept-url pattern="/rest/**" access="ROLE_VIEWER" />
        <security:intercept-url pattern="/json/**" access="ROLE_VIEWER" />
        <security:intercept-url pattern="/WEB-INF/classes/legacy-schema" access="ROLE_VIEWER" />
        <security:logout logout-url="/logout"/>
        <security:http-basic/>
    </security:http>

</beans>
